from collections import deque

# Graph as an adjacency list (dictionary)
tree = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': [],
    'F': []
}

# Recursive DFS
def dfs(node, visited=None):
    if visited is None:
        visited = set()
    visited.add(node)
    print(node)

    for neighbor in tree[node]:
        if neighbor not in visited:
            dfs(neighbor, visited)

# BFS using queue
def bfs(start):
    visited = set()
    queue = deque([start])
    print(queue)
    while queue:
        node = queue.popleft()
        if node not in visited:
            print(node)
            visited.add(node)
            print("Visited" + str(visited))
            queue.extend(tree[node])
            print(queue)

# Run DFS and BFS
print("DFS:")
dfs('A')

print("\nBFS:")
bfs('A')
