def is_safe(board, row, col, n):

  # Check same column
  for i in range(row):
    if board[i] == col:
      return False
    # Check diagonals
    if abs(board[i] - col) == abs(i - row):
      return False
  return True

def solve_n_queens(row, board, n):

  if row == n:
    print_solution(board, n)
    return
  for col in range(n):
    if is_safe(board, row, col, n):
      board[row] = col
      solve_n_queens(row + 1, board, n)
      # backtrack (undo last step)
      board[row] = -1

def print_solution(board, n):
  for i in range(n):
    row = ['.'] * n
    row[board[i]] = 'Q'
    print(' '.join(row))
  print()
  
# Input from user
n = int(input("Enter value of N for N-Queens: "))
board = [-1] * n
solve_n_queens(0, board, n)